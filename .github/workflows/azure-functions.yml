name: Build and publish Rust functions

on:
  workflow_call:
    inputs:
      AZURE_FUNCTIONAPP_NAME: 
        type: string
        description: 'Azure Function App name'
        required: true

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './azure/functions/rust'

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    steps:
    # Inputs
    - name: 'Show inputs'
      run: |
        echo AZURE_FUNCTIONAPP_NAME : ${{ inputs.AZURE_FUNCTIONAPP_NAME }}

    # Variables
    - name: 'Show variables'
      run: |
        echo AZURE_FUNCTIONAPP_PACKAGE_PATH : ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }} 

    # Checkout
    - name: 'Checkout repository branch'
      uses: actions/checkout@v2   

    # Login
    - name: 'Azure login'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}   

    # Install SSL
    - name: 'Install openssl dev binaries'
      shell: bash
      run: |
        sudo apt-get install pkg-config libssl-dev

    # Build
    - name: 'Build binary using Cargo --release'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        
        OPENSSL_STATIC=1 
        OPENSSL_INCLUDE_DIR=/usr/include/openssl
        OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu

        ls -la $OPENSSL_INCLUDE_DIR/*ssl*
        ls -la $OPENSSL_LIB_DIR/libssl*
        cargo --version
        cargo build --release

        mkdir -p ./output/nxfutil
        cp -v ./nxfutil/function.json ./output/nxfutil/function.json
        cp -v ./target/release/handler ./output/handler
        cp -v ./host.json ./output/host.json
        cp -v ./.funcignore ./.funcignore
        popd

    # Deployment
    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ inputs.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output

    # Logout
    - name: 'Azure logout'
      run: |
        az logout
      if: always()        