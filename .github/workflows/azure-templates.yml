name: Build and deploy Azure templates

on: 
  workflow_call:
    inputs:
      AZURE_LOCATION: 
        type: string
        description: 'Azure region name'
        required: true
        default: 'australiaeast'
      AZURE_SUBSCRIPTION_ID:
        type: string
        description: 'Azure subscription id'
        required: true
      AZURE_RESOURCEGROUP_NAME:
        type: string
        description: 'Azure resource group name'
        required: true        
    outputs:
      AZURE_KEYVAULT_NAME:
        description: 'Key Vault name'
        value: ${{ jobs.validate_and_deploy.outputs.AZURE_KEYVAULT_NAME }}
      AZURE_FUNCTIONAPP_NAME:
        description: 'Function App name'
        value: ${{ jobs.validate_and_deploy.outputs.AZURE_FUNCTIONAPP_NAME }}

env:
  BICEP_FILE_PATH: './azure/templates'
  BICEP_FILE_NAME: 'main'

jobs:
  validate_and_deploy:
    runs-on: ubuntu-latest 
    outputs:
      AZURE_KEYVAULT_NAME: ${{ steps.azureResources.outputs.NXFUTIL_AZ_KV_NAME }} 
      AZURE_FUNCTIONAPP_NAME: ${{ steps.azureResources.outputs.functionAppName }} 
    steps:
    # Inputs
    - name: 'Show inputs'
      run: |
        echo AZURE_LOCATION : ${{ inputs.AZURE_LOCATION }}
        echo AZURE_SUBSCRIPTION_ID : ${{ inputs.AZURE_SUBSCRIPTION_ID }}
        echo AZURE_RESOURCEGROUP_NAME : ${{ inputs.AZURE_RESOURCEGROUP_NAME }}

    # Variables
    - name: 'Show variables'
      run: |
        echo BICEP_FILE_PATH : ${{ env.BICEP_FILE_PATH }}       
        echo BICEP_FILE_NAME : ${{ env.BICEP_FILE_NAME }}       

    # Login
    - name: 'Azure login'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Checkout
    - name: 'Checkout repository branch'
      uses: actions/checkout@v2

    # Get objectId from clientId
    - name: 'Get principal from clientId'
      id: msiPrincipal
      run: |
        az ad sp list --spn "$CLIENT_ID"
        objectId=$(az ad sp list --spn "$CLIENT_ID" --query "[].objectId" --output tsv)
        if test "$objectId" == ''
        then 
          echo "property 'objectId' not found trying 'id' instead"
          objectId=$(az ad sp list --spn "$spn" --query "[].id" --output tsv)
        fi
        echo setting objectId to $objectId
        echo "::set-output name=objectId::$objectId"
      env: 
        CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}

    # Build
    - name: Validate Bicep file ${{ env.BICEP_FILE_PATH }}/${{ env.BICEP_FILE_NAME }}.bicep
      uses: Azure/cli@1.0.4
      with:
        inlineScript: |
          az --version
          az deployment sub validate \
            --name 'github-${{ github.run_number }}' \
            --location ${{ inputs.AZURE_LOCATION }} \
            --subscription ${{ inputs.AZURE_SUBSCRIPTION_ID }} \
            --template-file ${{ env.BICEP_FILE_PATH }}/${{ env.BICEP_FILE_NAME }}.bicep \
            --parameters resourceGroupName=${{ inputs.AZURE_RESOURCEGROUP_NAME }} deploymentPrincipalObjectId=${{ steps.msiPrincipal.outputs.objectId }}

    # Deployment
    - name: Deploy Bicep file ${{ env.BICEP_FILE_PATH }}/${{ env.BICEP_FILE_NAME }}.bicep
      id: azureResources
      uses: Azure/cli@1.0.4
      with:
        inlineScript: |
          az --version
          deployment=$(az deployment sub create \
            --name 'github-${{ github.run_number }}' \
            --location ${{ inputs.AZURE_LOCATION }} \
            --subscription ${{ inputs.AZURE_SUBSCRIPTION_ID }} \
            --template-file ${{ env.BICEP_FILE_PATH }}/${{ env.BICEP_FILE_NAME }}.bicep \
            --parameters resourceGroupName=${{ inputs.AZURE_RESOURCEGROUP_NAME }} deploymentPrincipalObjectId=${{ steps.msiPrincipal.outputs.objectId }})
          state=$(echo $deployment | jq -r ".properties.provisioningState")
          if test "$state" == 'Succeeded'
          then 
            kvName=$(echo $deployment | jq -r ".properties.outputs.NXFUTIL_AZ_KV_NAME.value")
            echo setting AZURE_KEYVAULT_NAME to $kvName
            echo "::set-output name=AZURE_KEYVAULT_NAME::$kvName"
            
            faName=$(echo $deployment | jq -r ".properties.outputs.functionAppName.value")
            echo setting AZURE_FUNCTIONAPP_NAME to $faName
            echo "::set-output name=AZURE_FUNCTIONAPP_NAME::$faName"
          else
            echo $deployment | jq -r "."
            exit 1
          fi

    # Outputs
    - name: 'Show outputs'
      run: |
        echo AZURE_KEYVAULT_NAME : ${{ steps.azureResources.outputs.NXFUTIL_AZ_KV_NAME }}
        echo AZURE_FUNCTIONAPP_NAME : ${{ steps.azureResources.outputs.functionAppName }}

    # Logout
    - name: 'Azure logout'
      run: |
        az logout
      if: always()