name: Build and publish Rust functions

on:
  workflow_dispatch:
    inputs:
      AZURE_FUNCTIONAPP_NAME: 
        type: string
        description: 'Azure Function App name'
        required: true

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'azure/functions/rust'
  RUST_BACKTRACE: 'full'
  CARGO_TARGET: 'x86_64-unknown-linux-gnu'
  OPENSSL_LIB_DIR: '/usr/lib/x86_64-linux-gnu'
  OPENSSL_INCLUDE_DIR: '/usr/include/openssl'

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    steps:
    # Inputs
    - name: 'Show inputs'
      run: |
        echo AZURE_FUNCTIONAPP_NAME : ${{ inputs.AZURE_FUNCTIONAPP_NAME }}

    # Variables
    - name: 'Show variables'
      run: |
        echo AZURE_FUNCTIONAPP_PACKAGE_PATH : ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }} 

    # Checkout
    - name: 'Checkout repository branch'
      uses: actions/checkout@v2   

    # Login
    - name: 'Azure login'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}   

    # Cache
    - name: 'Cache cargo target dir'
      id: cache
      uses: actions/cache@v3
      with:
        path: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/target'
        key: cargo-cache-nxfutil-target 

    # Update / Install Rust
    - name: 'Update / install rust'
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        target: ${{ env.CARGO_TARGET }}
        toolchain: stable
        default: true
        override: true

    # Upgrade TLS on this build host
    - name: 'Upgrade TLS on build host'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install libssl-dev pkg-config
        pushd '${{ env.OPENSSL_LIB_DIR }}'
        ls -la libssl*
        sudo rm libssl.so
        sudo ln -s libssl.so.1.1 libssl.so
        ls -la libssl*
        popd        

    # Build
    - name: 'Build custom handler binary'
      shell: bash
      run: |
        pushd '${{ env.OPENSSL_LIB_DIR }}'
        ls -la libssl*
        popd
        
        pushd '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        sudo apt-get install pkg-config libssl-dev
        cargo build --target "${{ env.CARGO_TARGET }}" --release
        popd
   
    # Move files 
    - name: 'Select only required files for FuncApp'
      shell: bash
      run: |
        pushd '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        mkdir -p ./output/nxfutil
        cp -v ./nxfutil/function.json ./output/nxfutil/function.json
        cp -v ./target/${{ env.CARGO_TARGET }}/release/handler ./output/handler
        cp -v ./host.json ./output/host.json
        cp -v ./.funcignore ./output/.funcignore
        popd

    # Deployment
    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ inputs.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output

    # Logout
    - name: 'Azure logout'
      run: |
        az logout
      if: always()        